== Jabolko.org

Stičišče vseh slovenskih apple uporabnikov.

class BlogController < ApplicationController

  def index
    respond_to  do |f|
      f.rss { @articles = Article.published }
    end
  end
  
  #TODO: zdruzi all_articles in index
  def all_articles
    @articles = Article.paginate :page => params[:page], :conditions => ["published = ?", true], :order => 'created_at DESC', :per_page => 5, :include => [:writers, :categories, :tags]
  end

  def category_articles
    @category = Category.find_by_permalink(params[:permalink])
    @category_articles = @category.articles.blog_pagination(params[:page])
    # @category_articles = Category.find_by_permalink(params[:permalink], :include => [:articles => {:writers, :categories, :tags}], :conditions => ["published = ?", true], :order => 'created_at DESC')
    # @category_articles = Article.find(:all, :include => [:writers, :categories, :tags], :conditions => ["published = ?", true], :order => 'created_at DESC').paginate :page => params[:page], :per_page => 5
    # .paginate :page => params[:page], :per_page => 5
  end
  
  def all_tags
    @tags = Tag.all(:order => "name ASC")
  end

  def tag_articles
    @tag = Tag.find_by_name(params[:name])
    raise ActiveRecord::RecordNotFound unless @tag
    if params[:order] == 'comments'
      @tag_articles = @tag.articles.sort_by_comments_count
    else
      @tag_articles = @tag.articles.published
    end
  end
  
  def writer_articles
    @writer = Writer.find(params[:id])
    @writer_articles = @writer.articles.published
  end
  
  def all_writers
    if params[:order] == 'articles'
      @writers = Writer.all(:conditions => { :visible => true }).sort_by do |writer|
        writer.articles.count
      end
      @writers = @writers.reverse
    else
      @writers = Writer.all(:conditions => { :visible => true }, :order => 'firstname ASC')
    end
  end

  def single_article
    @article = Article.find(params[:id], :conditions => ["published = ?", true], :include => [:comments, :tags, :categories, :writers, :source])
  end
  
  def search
    # @search = Article.search do
    #   keywords(h(params[:q]))
    #   with(:published, true)
    #   paginate(:page => params[:page], :per_page => 10)
    # end
  end

end